package cmd

import (
	"fmt"
	"os"
	"time"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var cfgFile string

// RootCmd represents the base command when called without any subcommands
var RootCmd = &cobra.Command{
	Use:   "remoteAudio",
	Short: "Audio streaming client & server for remote Amateur radio operations",
	Long:  `Audio streaming client & server for remote Amateur radio operations`,
}

// Execute adds all child commands to the root command sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	if err := RootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	cobra.OnInitialize(initConfig)

	RootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.remoteAudio.yaml)")

	RootCmd.PersistentFlags().String("input-device-hostapi", "default", "Audio host api for input device")
	RootCmd.PersistentFlags().StringP("input-device-name", "i", "default", "Input device")
	RootCmd.PersistentFlags().Float64("input-device-samplerate", 48000, "Input device sampling rate")
	RootCmd.PersistentFlags().Duration("input-device-latency", time.Millisecond*5, "Input latency")
	RootCmd.PersistentFlags().Int("input-device-channels", 1, "Input Channels")

	RootCmd.PersistentFlags().String("output-device-hostapi", "default", "Audio host api for output device host API")
	RootCmd.PersistentFlags().StringP("output-device-name", "o", "default", "Output device")
	RootCmd.PersistentFlags().Float64("output-device-samplerate", 48000, "Output device sampling rate")
	RootCmd.PersistentFlags().Duration("output-device-latency", time.Millisecond*5, "Output latency")
	RootCmd.PersistentFlags().Int("output-device-channels", 2, "Output Channels")

	RootCmd.PersistentFlags().String("opus-application", "restricted_lowdelay", "profile for opus encoder")
	RootCmd.PersistentFlags().Int("opus-bitrate", 32000, "Bitrate (bits/sec) generated by the opus encoder")
	RootCmd.PersistentFlags().Int("opus-complexity", 9, "Computational complexity of opus encoder")
	RootCmd.PersistentFlags().String("opus-max-bandwidth", "wideband", "maximum bandwidth of opus encoder")

	RootCmd.PersistentFlags().IntP("audio-frame-length", "f", 480, "Amount of audio samples in one frame")
	RootCmd.PersistentFlags().IntP("rx-buffer-length", "R", 10, "Buffer length (in frames) for incoming Audio packets")

	viper.BindPFlag("input-device.hostapi", RootCmd.PersistentFlags().Lookup("input-device-hostapi"))
	viper.BindPFlag("input-device.device-name", RootCmd.PersistentFlags().Lookup("input-device-name"))
	viper.BindPFlag("input-device.samplerate", RootCmd.PersistentFlags().Lookup("input-device-samplerate"))
	viper.BindPFlag("input-device.latency", RootCmd.PersistentFlags().Lookup("input-device-latency"))
	viper.BindPFlag("input-device.channels", RootCmd.PersistentFlags().Lookup("input-device-channels"))

	viper.BindPFlag("output-device.hostapi", RootCmd.PersistentFlags().Lookup("output-device-hostapi"))
	viper.BindPFlag("output-device.device-name", RootCmd.PersistentFlags().Lookup("output-device-name"))
	viper.BindPFlag("output-device.samplerate", RootCmd.PersistentFlags().Lookup("output-device-samplerate"))
	viper.BindPFlag("output-device.latency", RootCmd.PersistentFlags().Lookup("output-device-latency"))
	viper.BindPFlag("output-device.channels", RootCmd.PersistentFlags().Lookup("output-device-channels"))

	viper.BindPFlag("opus.application", RootCmd.PersistentFlags().Lookup("opus-application"))
	viper.BindPFlag("opus.bitrate", RootCmd.PersistentFlags().Lookup("opus-bitrate"))
	viper.BindPFlag("opus.complexity", RootCmd.PersistentFlags().Lookup("opus-complexity"))
	viper.BindPFlag("opus.max-bandwidth", RootCmd.PersistentFlags().Lookup("opus-max-bandwidth"))

	viper.BindPFlag("audio.frame-length", RootCmd.PersistentFlags().Lookup("audio-frame-length"))
	viper.BindPFlag("audio.rx-buffer-length", RootCmd.PersistentFlags().Lookup("rx-buffer-length"))
}

// initConfig reads in config file and ENV variables if set.
func initConfig() {
	if cfgFile != "" { // enable ability to specify config file via flag
		viper.SetConfigFile(cfgFile)
	} else {
		viper.SetConfigName(".remoteAudio") // name of config file (without extension)
		viper.AddConfigPath("$HOME")        // adding home directory as first search path
	}

	viper.AutomaticEnv() // read in environment variables that match
}
