// Code generated by protoc-gen-gogo.
// source: audio.proto
// DO NOT EDIT!

/*
	Package shackbus_audio is a generated protocol buffer package.

	It is generated from these files:
		audio.proto

	It has these top-level messages:
		None
		Capabilities
		PingPong
		Frame
		State
*/
package shackbus_audio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Channels int32

const (
	Channels_unknown Channels = 0
	Channels_mono    Channels = 1
	Channels_stereo  Channels = 2
)

var Channels_name = map[int32]string{
	0: "unknown",
	1: "mono",
	2: "stereo",
}
var Channels_value = map[string]int32{
	"unknown": 0,
	"mono":    1,
	"stereo":  2,
}

func (x Channels) String() string {
	return proto.EnumName(Channels_name, int32(x))
}
func (Channels) EnumDescriptor() ([]byte, []int) { return fileDescriptorAudio, []int{0} }

type Codec int32

const (
	Codec_none Codec = 0
	Codec_opus Codec = 1
	Codec_pcm  Codec = 2
)

var Codec_name = map[int32]string{
	0: "none",
	1: "opus",
	2: "pcm",
}
var Codec_value = map[string]int32{
	"none": 0,
	"opus": 1,
	"pcm":  2,
}

func (x Codec) String() string {
	return proto.EnumName(Codec_name, int32(x))
}
func (Codec) EnumDescriptor() ([]byte, []int) { return fileDescriptorAudio, []int{1} }

type None struct {
}

func (m *None) Reset()                    { *m = None{} }
func (m *None) String() string            { return proto.CompactTextString(m) }
func (*None) ProtoMessage()               {}
func (*None) Descriptor() ([]byte, []int) { return fileDescriptorAudio, []int{0} }

type Capabilities struct {
	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	RxStreamAddress     string `protobuf:"bytes,2,opt,name=rx_stream_address,json=rxStreamAddress,proto3" json:"rx_stream_address,omitempty"`
	TxStreamAddress     string `protobuf:"bytes,3,opt,name=tx_stream_address,json=txStreamAddress,proto3" json:"tx_stream_address,omitempty"`
	StateUpdatesAddress string `protobuf:"bytes,4,opt,name=state_updates_address,json=stateUpdatesAddress,proto3" json:"state_updates_address,omitempty"`
	Index               int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptorAudio, []int{1} }

func (m *Capabilities) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Capabilities) GetRxStreamAddress() string {
	if m != nil {
		return m.RxStreamAddress
	}
	return ""
}

func (m *Capabilities) GetTxStreamAddress() string {
	if m != nil {
		return m.TxStreamAddress
	}
	return ""
}

func (m *Capabilities) GetStateUpdatesAddress() string {
	if m != nil {
		return m.StateUpdatesAddress
	}
	return ""
}

func (m *Capabilities) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type PingPong struct {
	Ping int64 `protobuf:"varint,1,opt,name=ping,proto3" json:"ping,omitempty"`
}

func (m *PingPong) Reset()                    { *m = PingPong{} }
func (m *PingPong) String() string            { return proto.CompactTextString(m) }
func (*PingPong) ProtoMessage()               {}
func (*PingPong) Descriptor() ([]byte, []int) { return fileDescriptorAudio, []int{2} }

func (m *PingPong) GetPing() int64 {
	if m != nil {
		return m.Ping
	}
	return 0
}

// Audio frame consisting of the raw audio byte array + metadata
type Frame struct {
	Codec        Codec    `protobuf:"varint,1,opt,name=codec,proto3,enum=shackbus.audio.Codec" json:"codec,omitempty"`
	Channels     Channels `protobuf:"varint,2,opt,name=channels,proto3,enum=shackbus.audio.Channels" json:"channels,omitempty"`
	FrameLength  int32    `protobuf:"varint,3,opt,name=frame_length,json=frameLength,proto3" json:"frame_length,omitempty"`
	SamplingRate int32    `protobuf:"varint,4,opt,name=sampling_rate,json=samplingRate,proto3" json:"sampling_rate,omitempty"`
	BitDepth     int32    `protobuf:"varint,5,opt,name=bit_depth,json=bitDepth,proto3" json:"bit_depth,omitempty"`
	Data         []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	UserId       string   `protobuf:"bytes,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptorAudio, []int{3} }

func (m *Frame) GetCodec() Codec {
	if m != nil {
		return m.Codec
	}
	return Codec_none
}

func (m *Frame) GetChannels() Channels {
	if m != nil {
		return m.Channels
	}
	return Channels_unknown
}

func (m *Frame) GetFrameLength() int32 {
	if m != nil {
		return m.FrameLength
	}
	return 0
}

func (m *Frame) GetSamplingRate() int32 {
	if m != nil {
		return m.SamplingRate
	}
	return 0
}

func (m *Frame) GetBitDepth() int32 {
	if m != nil {
		return m.BitDepth
	}
	return 0
}

func (m *Frame) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Frame) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type State struct {
	RxOn   bool   `protobuf:"varint,1,opt,name=rx_on,json=rxOn,proto3" json:"rx_on,omitempty"`
	TxUser string `protobuf:"bytes,3,opt,name=tx_user,json=txUser,proto3" json:"tx_user,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptorAudio, []int{4} }

func (m *State) GetRxOn() bool {
	if m != nil {
		return m.RxOn
	}
	return false
}

func (m *State) GetTxUser() string {
	if m != nil {
		return m.TxUser
	}
	return ""
}

func init() {
	proto.RegisterType((*None)(nil), "shackbus.audio.None")
	proto.RegisterType((*Capabilities)(nil), "shackbus.audio.Capabilities")
	proto.RegisterType((*PingPong)(nil), "shackbus.audio.PingPong")
	proto.RegisterType((*Frame)(nil), "shackbus.audio.Frame")
	proto.RegisterType((*State)(nil), "shackbus.audio.State")
	proto.RegisterEnum("shackbus.audio.Channels", Channels_name, Channels_value)
	proto.RegisterEnum("shackbus.audio.Codec", Codec_name, Codec_value)
}
func (m *None) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *None) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Capabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Capabilities) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.RxStreamAddress) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.RxStreamAddress)))
		i += copy(dAtA[i:], m.RxStreamAddress)
	}
	if len(m.TxStreamAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.TxStreamAddress)))
		i += copy(dAtA[i:], m.TxStreamAddress)
	}
	if len(m.StateUpdatesAddress) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.StateUpdatesAddress)))
		i += copy(dAtA[i:], m.StateUpdatesAddress)
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *PingPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingPong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ping != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.Ping))
	}
	return i, nil
}

func (m *Frame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Frame) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Codec != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.Codec))
	}
	if m.Channels != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.Channels))
	}
	if m.FrameLength != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.FrameLength))
	}
	if m.SamplingRate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.SamplingRate))
	}
	if m.BitDepth != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAudio(dAtA, i, uint64(m.BitDepth))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RxOn {
		dAtA[i] = 0x8
		i++
		if m.RxOn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.TxUser) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAudio(dAtA, i, uint64(len(m.TxUser)))
		i += copy(dAtA[i:], m.TxUser)
	}
	return i, nil
}

func encodeFixed64Audio(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Audio(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAudio(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *None) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Capabilities) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	l = len(m.RxStreamAddress)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	l = len(m.TxStreamAddress)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	l = len(m.StateUpdatesAddress)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovAudio(uint64(m.Index))
	}
	return n
}

func (m *PingPong) Size() (n int) {
	var l int
	_ = l
	if m.Ping != 0 {
		n += 1 + sovAudio(uint64(m.Ping))
	}
	return n
}

func (m *Frame) Size() (n int) {
	var l int
	_ = l
	if m.Codec != 0 {
		n += 1 + sovAudio(uint64(m.Codec))
	}
	if m.Channels != 0 {
		n += 1 + sovAudio(uint64(m.Channels))
	}
	if m.FrameLength != 0 {
		n += 1 + sovAudio(uint64(m.FrameLength))
	}
	if m.SamplingRate != 0 {
		n += 1 + sovAudio(uint64(m.SamplingRate))
	}
	if m.BitDepth != 0 {
		n += 1 + sovAudio(uint64(m.BitDepth))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	return n
}

func (m *State) Size() (n int) {
	var l int
	_ = l
	if m.RxOn {
		n += 2
	}
	l = len(m.TxUser)
	if l > 0 {
		n += 1 + l + sovAudio(uint64(l))
	}
	return n
}

func sovAudio(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAudio(x uint64) (n int) {
	return sovAudio(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *None) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: None: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: None: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Capabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Capabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Capabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxStreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RxStreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxStreamAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxStreamAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateUpdatesAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateUpdatesAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			m.Ping = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ping |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Frame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Frame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Frame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			m.Codec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codec |= (Codec(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			m.Channels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channels |= (Channels(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrameLength", wireType)
			}
			m.FrameLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FrameLength |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplingRate", wireType)
			}
			m.SamplingRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SamplingRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BitDepth", wireType)
			}
			m.BitDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BitDepth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RxOn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RxOn = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAudio
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudio(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudio
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudio(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudio
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudio
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAudio
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAudio
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAudio(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAudio = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudio   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("audio.proto", fileDescriptorAudio) }

var fileDescriptorAudio = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0xeb, 0xd4, 0x76, 0xdc, 0x9b, 0x90, 0x9a, 0x69, 0x2b, 0xac, 0x82, 0xa2, 0x10, 0x58,
	0x44, 0x41, 0x64, 0x11, 0x40, 0xfc, 0xec, 0xa0, 0x40, 0x85, 0x84, 0xa0, 0x72, 0xd4, 0xb5, 0x35,
	0x89, 0x2f, 0x89, 0xd5, 0x64, 0xc6, 0x9a, 0xb9, 0x06, 0x3f, 0x0a, 0xaf, 0xc2, 0x9e, 0x05, 0x4b,
	0x1e, 0x01, 0x85, 0xd7, 0x60, 0x81, 0x66, 0x9c, 0x54, 0xb4, 0x69, 0x37, 0xec, 0x66, 0xce, 0xf9,
	0xae, 0xac, 0x73, 0xe7, 0x18, 0x1a, 0xbc, 0x48, 0x33, 0x39, 0xc8, 0x95, 0x24, 0xc9, 0x5a, 0x7a,
	0xc6, 0x27, 0x67, 0xe3, 0x42, 0x0f, 0xac, 0xda, 0xf5, 0xc1, 0xfd, 0x20, 0x05, 0x76, 0xbf, 0x3b,
	0xd0, 0x3c, 0xe2, 0x39, 0x1f, 0x67, 0xf3, 0x8c, 0x32, 0xd4, 0x8c, 0x81, 0x2b, 0xf8, 0x02, 0x23,
	0xa7, 0xe3, 0xf4, 0x76, 0x62, 0x7b, 0x66, 0x7d, 0xb8, 0xa9, 0xca, 0x44, 0x93, 0x42, 0xbe, 0x48,
	0x78, 0x9a, 0x2a, 0xd4, 0x3a, 0xaa, 0x59, 0x60, 0x57, 0x95, 0x23, 0xab, 0xbf, 0xac, 0x64, 0xc3,
	0xd2, 0x06, 0xbb, 0x5d, 0xb1, 0x74, 0x89, 0x1d, 0xc2, 0x81, 0x26, 0x4e, 0x98, 0x14, 0x79, 0xca,
	0x09, 0xf5, 0x39, 0xef, 0x5a, 0x7e, 0xcf, 0x9a, 0xa7, 0x95, 0xb7, 0x9e, 0xd9, 0x07, 0x2f, 0x13,
	0x29, 0x96, 0x91, 0xd7, 0x71, 0x7a, 0x5e, 0x5c, 0x5d, 0xba, 0x6d, 0x08, 0x4e, 0x32, 0x31, 0x3d,
	0x91, 0x62, 0x6a, 0x12, 0xe4, 0x99, 0x98, 0xda, 0x04, 0xdb, 0xb1, 0x3d, 0x77, 0xff, 0x38, 0xe0,
	0xbd, 0x55, 0x26, 0xcb, 0x03, 0xf0, 0x26, 0x32, 0xc5, 0x89, 0xb5, 0x5b, 0xc3, 0x83, 0xc1, 0xc5,
	0xc5, 0x0c, 0x8e, 0x8c, 0x19, 0x57, 0x0c, 0x7b, 0x0c, 0xc1, 0x64, 0xc6, 0x85, 0xc0, 0x79, 0x95,
	0xb7, 0x35, 0x8c, 0x36, 0xf8, 0x95, 0x1f, 0x9f, 0x93, 0xec, 0x2e, 0x34, 0x3f, 0x99, 0x6f, 0x25,
	0x73, 0x14, 0x53, 0x9a, 0xd9, 0xf4, 0x5e, 0xdc, 0xb0, 0xda, 0x7b, 0x2b, 0xb1, 0x7b, 0x70, 0x43,
	0xf3, 0x45, 0x3e, 0xcf, 0xc4, 0x34, 0x51, 0x9c, 0xd0, 0x26, 0xf6, 0xe2, 0xe6, 0x5a, 0x8c, 0x39,
	0x21, 0xbb, 0x0d, 0x3b, 0xe3, 0x8c, 0x92, 0x14, 0x73, 0x9a, 0xad, 0xe2, 0x06, 0xe3, 0x8c, 0x5e,
	0x9b, 0xbb, 0x49, 0x99, 0x72, 0xe2, 0x91, 0xdf, 0x71, 0x7a, 0xcd, 0xd8, 0x9e, 0xd9, 0x2d, 0xa8,
	0x17, 0x1a, 0x55, 0x92, 0xa5, 0x51, 0x60, 0x37, 0xe8, 0x9b, 0xeb, 0xbb, 0xb4, 0xfb, 0x04, 0xbc,
	0x91, 0xd9, 0x25, 0xdb, 0x03, 0x4f, 0x95, 0x89, 0x14, 0x36, 0x7d, 0x10, 0xbb, 0xaa, 0xfc, 0x28,
	0xcc, 0x18, 0x95, 0x89, 0x41, 0x57, 0x0f, 0xe5, 0x53, 0x79, 0xaa, 0x51, 0xf5, 0x1f, 0x42, 0xb0,
	0x8e, 0xc7, 0x1a, 0x50, 0x2f, 0xc4, 0x99, 0x90, 0x5f, 0x44, 0xb8, 0xc5, 0x02, 0x70, 0x17, 0x52,
	0xc8, 0xd0, 0x61, 0x00, 0xbe, 0x26, 0x54, 0x28, 0xc3, 0x5a, 0xff, 0x3e, 0x78, 0x76, 0x7b, 0xc6,
	0x16, 0x52, 0x60, 0x05, 0xca, 0xbc, 0xd0, 0xa1, 0xc3, 0xea, 0xb0, 0x9d, 0x4f, 0x16, 0x61, 0x6d,
	0xf8, 0xad, 0x06, 0xfe, 0x08, 0xd5, 0x67, 0x54, 0xec, 0x0d, 0xec, 0x1e, 0x23, 0x5d, 0xa8, 0xdf,
	0xfe, 0xe5, 0xfd, 0x9a, 0x96, 0x1e, 0xde, 0xd9, 0xd8, 0xfa, 0xbf, 0x33, 0x4f, 0x21, 0x38, 0x46,
	0xaa, 0x02, 0x5e, 0x3d, 0xbf, 0xf1, 0xca, 0x15, 0xfc, 0x1c, 0x1a, 0x23, 0xe2, 0x8a, 0xaa, 0x56,
	0x5e, 0x33, 0x7b, 0xa5, 0xca, 0x9e, 0x01, 0x8c, 0x48, 0xe6, 0xff, 0x31, 0xf9, 0x02, 0x5c, 0x53,
	0x55, 0xb6, 0xd1, 0xa4, 0x75, 0x81, 0x0f, 0xaf, 0x75, 0x5e, 0x85, 0x3f, 0x96, 0x6d, 0xe7, 0xe7,
	0xb2, 0xed, 0xfc, 0x5a, 0xb6, 0x9d, 0xaf, 0xbf, 0xdb, 0x5b, 0x63, 0xdf, 0xfe, 0xde, 0x8f, 0xfe,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x04, 0x08, 0xa2, 0xa0, 0xed, 0x03, 0x00, 0x00,
}
